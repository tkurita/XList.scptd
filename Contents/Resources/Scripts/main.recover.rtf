{\rtf1\ansi\ansicpg932\cocoartf1038\cocoasubrtf360
{\fonttbl\f0\fnil\fcharset0 Verdana;\f1\fnil\fcharset128 HiraKakuProN-W3;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red108\green5\blue211;\red0\green0\blue255;
\red64\green128\blue0;\red0\green22\blue176;\red76\green78\blue78;\red74\green30\blue127;}
\deftab480
\pard\pardeftab480\ql\qnatural\pardirnatural

\f0\b\fs24 \cf2 property
\b0  \cf3 name\cf2  : "XList"\

\b property
\b0  
\i \cf4 version
\i0 \cf2  : "1.4.1"\
\

\b property
\b0  \cf5 XText\cf2  : 
\b \cf6 module
\b0 \cf2 \
\
\cf7 (*!@references\
XText || help:openbook='XText Help'\
*)\cf2 \
\
\cf7 (*!@title XList Reference\
* Version : 1.4.1\
* Author : Tetsuro KURITA ((<tkurita@mac.com>))\
<!--begin locale ja-->\

\f1 \'83\'8a\'83\'58\'83\'67\'82\'f0
\f0  iterator, stack, queue 
\f1 \'82\'c8\'82\'c7\'82\'c6\'82\'b5\'82\'c4\'88\'b5\'82\'a4\'83\'58\'83\'4e\'83\'8a\'83\'76\'83\'67\'83\'49\'83\'75\'83\'57\'83\'46\'83\'4e\'83\'67\'81\'42
\f0 \
<!--begin locale en-->\
XList provides a wapper object to treat AppleScript's list as iterator, stack and queue.\
<!--end locale-->\
*)\cf2 \
\
\cf7 (*!@group Constructor Method *)\cf2 \
\
\cf7 (*!\
@abstruct \
<!--begin locale ja-->\
XList 
\f1 \'83\'49\'83\'75\'83\'57\'83\'46\'83\'4e\'83\'67\'82\'cc\'83\'43\'83\'93\'83\'58\'83\'5e\'83\'93\'83\'58\'82\'f0\'8d\'ec\'82\'e8\'82\'dc\'82\'b7\'81\'42\'93\'e0\'97\'65\'82\'cd\'90\'dd\'92\'e8\'82\'b3\'82\'ea\'82\'c4\'82\'a2\'82\'dc\'82\'b9\'82\'f1\'81\'42
\f0 \
<!--begin locale en-->\
Meke an instance of empty XList.\
<!--end locale-->\
\
@result script object : a new XList instance\
*)\cf2 \

\b on
\b0  
\b \cf4 make
\b0 \cf2 \
	
\b return
\b0  \cf5 make_with\cf2 (\{\})\

\b end
\b0  
\b \cf4 make
\b0 \cf2 \
\
\cf7 (*!\
@abstruct \
<!--begin locale ja-->\

\f1 \'97\'5e\'82\'a6\'82\'bd\'83\'8a\'83\'58\'83\'67\'82\'f0\'82\'e0\'82\'c6\'82\'c9
\f0  XList 
\f1 \'83\'49\'83\'75\'83\'57\'83\'46\'83\'4e\'83\'67\'82\'cc\'83\'43\'83\'93\'83\'58\'83\'5e\'83\'93\'83\'58\'82\'f0\'8d\'ec\'82\'e8\'82\'dc\'82\'b7\'81\'42
\f0 \
<!--begin locale en-->\
Meke an instance of XList with given an AppleScript's  list object.\
<!--end locale-->\
@param
\f1 \'81\'40
\f0 a_list (list)\
@result script object : a new XList instance\
*)\cf2 \

\b on
\b0  \cf5 make_with\cf2 (\cf5 a_list\cf2 )\
	
\b set
\b0  \cf5 a_parent\cf2  
\b to
\b0  
\b me
\b0 \
	
\b script
\b0  \cf5 XList\cf2 \
		
\b property
\b0  \cf3 parent\cf2  : \cf5 a_parent\cf2 \
		
\b property
\b0  \cf5 _contents\cf2  : \cf5 a_list\cf2 \
		
\b property
\b0  \cf5 _length\cf2  : 
\b \cf4 count
\b0 \cf2  \cf5 a_list\cf2 \
		
\b property
\b0  \cf5 _n\cf2  : 1\
		
\b property
\b0  \cf5 _currentItem\cf2  : 
\i \cf4 missing value
\i0 \cf2 \
	
\b end
\b0  
\b script
\b0 \
	\
	
\b return
\b0  \cf5 XList\cf2 \

\b end
\b0  \cf5 make_with\cf2 \
\
\cf7 (*!\
@abstruct\
<!-- begin locale ja -->\
((<make_with>)) 
\f1 \'82\'c6\'93\'af\'82\'b6\'82\'c5\'82\'b7\'81\'42
\f0 \
<!-- begin locale en -->\
A synonym of ((<make_with>))\
<!-- end locale -->\
@description\
<!--begin locale ja-->\

\f1 \'97\'5e\'82\'a6\'82\'bd\'83\'8a\'83\'58\'83\'67\'82\'f0\'82\'e0\'82\'c6\'82\'c9
\f0  XList 
\f1 \'83\'49\'83\'75\'83\'57\'83\'46\'83\'4e\'83\'67\'82\'cc\'83\'43\'83\'93\'83\'58\'83\'5e\'83\'93\'83\'58\'82\'f0\'8d\'ec\'82\'e8\'82\'dc\'82\'b7\'81\'42
\f0 \
<!--begin locale en-->\
Meke an instance of XList with given an AppleScript's  list object.\
<!--end locale-->\
@param
\f1 \'81\'40
\f0 a_list (list)\
@result script object : a new XList instance\
*)\cf2 \

\b on
\b0  \cf5 make_with_list\cf2 (\cf5 a_list\cf2 )\
	
\b return
\b0  \cf5 make_with\cf2 (\cf5 a_list\cf2 )\

\b end
\b0  \cf5 make_with_list\cf2 \
\
\cf7 (*!\
@abstruct \
<!--begin locale ja-->\

\f1 \'83\'65\'83\'4c\'83\'58\'83\'67\'82\'f0\'8b\'e6\'90\'d8\'82\'e8\'95\'b6\'8e\'9a\'82\'c5\'95\'aa\'8a\'84\'82\'b5\'82\'bd\'83\'8a\'83\'58\'83\'67\'82\'f0\'82\'e0\'82\'c6\'82\'c9
\f0  XList 
\f1 \'83\'49\'83\'75\'83\'57\'83\'46\'83\'4e\'83\'67\'82\'cc\'83\'43\'83\'93\'83\'58\'83\'5e\'83\'93\'83\'58\'82\'f0\'8d\'ec\'82\'e8\'82\'dc\'82\'b7\'81\'42
\f0 \
<!--begin locale en-->\
Meke an instance of XList with from a list splitting a text with a delimiter.\
<!--end locale-->\
@param
\f1 \'81\'40
\f0 a_text (Unicode or string)\
@param a_delimiter (Unicode or string)\
@result script object : a new XList instance\
*)\cf2 \

\b on
\b0  \cf5 make_with_text\cf2 (\cf5 a_text\cf2 , \cf5 a_delimiter\cf2 )\
	
\b set
\b0  \cf5 pre_delim\cf2  
\b to
\b0  \cf3 AppleScript\cf2 's \cf3 text item delimiters\cf2 \
	
\b set
\b0  \cf3 AppleScript\cf2 's \cf3 text item delimiters\cf2  
\b to
\b0  \cf5 a_delimiter\cf2 \
	
\b set
\b0  \cf5 a_list\cf2  
\b to
\b0  
\b every
\b0  
\i \cf4 text item
\i0 \cf2  
\b of
\b0  \cf5 a_text\cf2 \
	
\b set
\b0  \cf3 AppleScript\cf2 's \cf3 text item delimiters\cf2  
\b to
\b0  \cf5 pre_delim\cf2 \
	
\b return
\b0  \cf5 make_with\cf2 (\cf5 a_list\cf2 )\

\b end
\b0  \cf5 make_with_text\cf2 \
\
\cf7 (*!@group  Methods for Iterator *)\cf2 \
\
\cf7 (*!\
@abstruct\
<!--begin locale ja-->\

\f1 \'91\'4f\'89\'f1\'82\'cc
\f0  ((<next>))() 
\f1 \'82\'c5\'8e\'e6\'93\'be\'82\'b5\'82\'bd\'8d\'80\'96\'da\'82\'cc\'8e\'9f\'82\'cc\'97\'76\'91\'66\'82\'f0\'8e\'e6\'93\'be\'82\'b5\'82\'dc\'82\'b7\'81\'42
\f0 \
<!--begin locale en-->\
return an item in the list next to the item obtained by previous ((<next>))()\
<!--end locale-->\
@description\
<!--begin locale ja-->\

\f1 \'83\'8a\'83\'58\'83\'67\'82\'cc\'8d\'c5\'8c\'e3\'82\'cc\'8d\'80\'96\'da\'82\'dc\'82\'c5\'97\'88\'82\'c4\'82\'a2\'82\'c4\'81\'41\'8e\'9f\'82\'cc\'8d\'80\'96\'da\'82\'aa\'96\'b3\'82\'a2\'8f\'ea\'8d\'87\'82\'cd\'81\'41
\f0 error number 1351 
\f1 \'82\'f0\'94\'ad\'90\'b6\'82\'b5\'82\'dc\'82\'b7\'81\'42
\f0 \
<!--begin locale en-->\
When the last item have been already returned, error number 1351 is raised.\
<!--end locale-->\
\
@result anything\
*)\cf2 \

\b on
\b0  \cf5 next\cf2 ()\
	
\b try
\b0 \
		
\b set
\b0  \cf5 an_item\cf2  
\b to
\b0  
\i \cf4 item
\i0 \cf2  (
\b my
\b0  \cf5 _n\cf2 ) 
\b of
\b0  
\b my
\b0  \cf5 _contents\cf2 \
	
\b on
\b0  
\b error
\b0  \cf5 msg\cf2  \cf4 number\cf2  -1728\
		
\b if
\b0  
\b my
\b0  \cf5 _n\cf2  > 
\b my
\b0  \cf5 _length\cf2  
\b then
\b0 \
			
\b error
\b0  "No next item." \cf4 number\cf2  1351\
		
\b else
\b0 \
			
\b error
\b0  \cf5 msg\cf2  \cf4 number\cf2  -1728\
		
\b end
\b0  
\b if
\b0 \
	
\b end
\b0  
\b try
\b0 \
	\
	
\b set
\b0  
\b my
\b0  \cf5 _n\cf2  
\b to
\b0  (
\b my
\b0  \cf5 _n\cf2 ) + 1\
	
\b return
\b0  \cf5 an_item\cf2 \

\b end
\b0  \cf5 next\cf2 \
\

\b on
\b0  \cf5 next_item\cf2 ()\
	
\b return
\b0  \cf5 next\cf2 ()\

\b end
\b0  \cf5 next_item\cf2 \
\
\cf7 (*!\
@abstruct\
<!--begin locale ja-->\
((<next>))() 
\f1 \'82\'c5\'8e\'9f\'82\'cc\'97\'76\'91\'66\'82\'f0\'8e\'e6\'93\'be\'82\'c5\'82\'ab\'82\'e9\'82\'a9\'82\'c7\'82\'a4\'82\'a9\'94\'bb\'92\'e8\'82\'b5\'82\'dc\'82\'b7\'81\'42
\f0 \
<!--begin locale en-->\
check whether ((<next>))() can return a next item or not\
<!--end locale-->\
@description \
<!--begin locale ja-->\
((<next>))() 
\f1 \'82\'c5\'8d\'c5\'8c\'e3\'82\'cc\'8d\'80\'96\'da\'82\'dc\'82\'c5\'8e\'e6\'93\'be\'82\'b5\'82\'c4\'82\'a2\'82\'bd\'82\'e7
\f0  false\
<!--begin locale en-->\
false should be returned, when the last item have been already returned with ((<next>))().\
<!--end locale-->\
@result boolean\
*)\cf2 \

\b on
\b0  \cf5 has_next\cf2 ()\
	
\b return
\b0  
\b my
\b0  \cf5 _n\cf2  
\b is
\b0  
\b less than
\b0  
\b or
\b0  
\b equal to
\b0  
\b my
\b0  \cf5 _length\cf2 \

\b end
\b0  \cf5 has_next\cf2 \
\
\cf7 (*!\
@abstruct\
<!--begin locale ja-->\

\f1 \'92\'bc\'91\'4f\'82\'cc
\f0  ((<next>))() 
\f1 \'82\'c5\'8e\'e6\'93\'be\'82\'b5\'82\'bd\'97\'76\'91\'66\'82\'c6\'93\'af\'82\'b6\'97\'76\'91\'66\'82\'f0\'8e\'e6\'93\'be\'82\'b5\'82\'dc\'82\'b7\'81\'42
\f0 \
<!--begin locale en-->\
The item obtained by previous ((<next>))() is returned.\
<!--end locale-->\
@result anything\
*)\cf2 \

\b on
\b0  \cf5 current_item\cf2 ()\
	
\b return
\b0  
\i \cf4 item
\i0 \cf2  ((
\b my
\b0  \cf5 _n\cf2 ) - 1) 
\b of
\b0  
\b my
\b0  \cf5 _contents\cf2 \

\b end
\b0  \cf5 current_item\cf2 \
\
\cf7 (*!\
@abstruct\
<!--begin locale ja-->\

\f1 \'92\'bc\'91\'4f\'82\'cc
\f0  ((<next>))() 
\f1 \'82\'c5\'8e\'e6\'93\'be\'82\'b5\'82\'bd\'97\'76\'91\'66\'82\'cc\'83\'43\'83\'93\'83\'66\'83\'62\'83\'4e\'83\'58
\f0 \
<!--begin locale en-->\
An index number of an item obtained by previous ((<next>))() is returned.\
<!--end locale-->\
@result integer\
*)\cf2 \

\b on
\b0  \cf5 current_index\cf2 ()\
	
\b return
\b0  (
\b my
\b0  \cf5 _n\cf2 ) - 1\

\b end
\b0  \cf5 current_index\cf2 \
\
\cf7 (*!\
@abstruct
\f1 \'81\'40
\f0 \
<!--begin locale ja-->\
((<next>))() 
\f1 \'82\'c5\'8e\'e6\'93\'be\'82\'b7\'82\'e9\'83\'8a\'83\'58\'83\'67\'8d\'80\'96\'da\'82\'cc
\f0  index 
\f1 \'82\'f0\'88\'ea\'82\'c2\'8a\'aa\'82\'ab\'96\'df\'82\'b5\'82\'dc\'82\'b7\'81\'42
\f0 \
<!--begin locale en-->\
Decrements the index of the item obtained by ((<next>))(). i.e. same item can be obtained once more.\
<!--end locale-->\
*)\cf2 \

\b on
\b0  \cf5 decrement_index\cf2 ()\
	
\b if
\b0  
\b my
\b0  \cf5 _n\cf2  > 1 
\b then
\b0 \
		
\b set
\b0  
\b my
\b0  \cf5 _n\cf2  
\b to
\b0  (
\b my
\b0  \cf5 _n\cf2 ) - 1\
	
\b end
\b0  
\b if
\b0 \

\b end
\b0  \cf5 decrement_index\cf2 \
\
\cf7 (*!\
@abstruct\
<!--begin locale ja-->\
((<next>))() 
\f1 \'82\'c5\'8e\'e6\'93\'be\'82\'b7\'82\'e9\'83\'8a\'83\'58\'83\'67\'8d\'80\'96\'da\'82\'cc
\f0  index 
\f1 \'82\'f0\'88\'ea\'82\'c2\'91\'9d\'82\'e2\'82\'b5\'82\'dc\'82\'b7\'81\'42\'82\'c2\'82\'dc\'82\'e8\'81\'41\'88\'ea\'82\'c2\'8d\'80\'96\'da\'82\'f0\'83\'58\'83\'4c\'83\'62\'83\'76\'82\'b3\'82\'b9\'82\'dc\'82\'b7\'81\'42
\f0 \
<!--begin locale en-->\
Increments the index of the item obtained by ((<next>))(). i.e. skip an item.\
<!--end locale-->\
\
*)\cf2 \

\b on
\b0  \cf5 increment_index\cf2 ()\
	
\b if
\b0  
\b my
\b0  \cf5 _n\cf2  > 1 
\b then
\b0 \
		
\b set
\b0  
\b my
\b0  \cf5 _n\cf2  
\b to
\b0  (
\b my
\b0  \cf5 _n\cf2 ) + 1\
	
\b end
\b0  
\b if
\b0 \

\b end
\b0  \cf5 increment_index\cf2 \
\
\cf7 (*!\
@abstruct\
<!--begin locale ja-->\
((<next>))() 
\f1 \'82\'c5\'8e\'e6\'93\'be\'82\'b7\'82\'e9\'83\'8a\'83\'58\'83\'67\'8d\'80\'96\'da\'82\'f0\'82\'cd\'82\'b6\'82\'df\'82\'c9\'96\'df\'82\'b5\'82\'dc\'82\'b7\'81\'42
\f0 \
<!--begin locale en-->\
Make ((<next>))() return items form first.\
<!--end locale-->\
*)\cf2 \

\b on
\b0  \cf5 reset\cf2 ()\
	
\b set
\b0  
\b my
\b0  \cf5 _n\cf2  
\b to
\b0  1\

\b end
\b0  \cf5 reset\cf2 \
\
\cf7 (*!@group Stack and Quene *)\cf2 \
\
\cf7 (*!\
@abstruct\
<!--begin locale ja-->\

\f1 \'83\'8a\'83\'58\'83\'67\'82\'cc\'8d\'c5\'8c\'e3\'82\'c9\'97\'76\'91\'66\'82\'f0\'95\'74\'82\'af\'89\'c1\'82\'a6\'82\'dc\'82\'b7\'81\'42
\f0 \
<!--begin locale en-->\
Append an item at the end of the list.\
<!--end locale-->\
@param an_item(anything) : \
<!--begin locale ja-->
\f1 \'83\'8a\'83\'58\'83\'67\'82\'c9\'95\'74\'82\'af\'89\'c1\'82\'a6\'82\'e9\'8d\'80\'96\'da
\f0 \
<!--begin locale en-->an item to append into the list\
<!--end locale-->\
*)\cf2 \

\b on
\b0  \cf5 push\cf2 (\cf5 an_item\cf2 )\
	
\b set
\b0  
\b end
\b0  
\b of
\b0  
\b my
\b0  \cf5 _contents\cf2  
\b to
\b0  \cf5 an_item\cf2 \
	
\b set
\b0  
\b my
\b0  \cf5 _length\cf2  
\b to
\b0  (
\b my
\b0  \cf5 _length\cf2 ) + 1\

\b end
\b0  \cf5 push\cf2 \
\
\cf7 (*!\
@abstruct\
<!--begin locale ja-->\

\f1 \'83\'8a\'83\'58\'83\'67\'82\'cc\'8d\'c5\'8c\'e3\'82\'cc\'97\'76\'91\'66\'82\'f0\'8e\'e6\'93\'be\'82\'b5\'82\'c4\'81\'41\'83\'8a\'83\'58\'83\'67\'82\'a9\'82\'e7\'8d\'ed\'8f\'9c\'82\'b5\'82\'dc\'82\'b7\'81\'42
\f0 \
<!--begin locale en-->\
Obtain last item in the stored list, and remove the item.\
<!--end locale-->\
@result anything : \
<!--begin locale ja-->
\f1 \'83\'8a\'83\'58\'83\'67\'82\'cc\'8d\'c5\'8c\'e3\'82\'cc\'8d\'80\'96\'da
\f0 \
<!--begin locale en-->last item in the list <!--end locale-->\
*)\cf2 \

\b on
\b0  \cf5 pop\cf2 ()\
	
\b try
\b0 \
		
\b set
\b0  \cf5 a_result\cf2  
\b to
\b0  
\b last
\b0  
\i \cf4 item
\i0 \cf2  
\b of
\b0  
\b my
\b0  \cf5 _contents\cf2 \
	
\b on
\b0  
\b error
\b0 \
		
\b return
\b0  
\i \cf4 missing value
\i0 \cf2 \
	
\b end
\b0  
\b try
\b0 \
	\
	
\b try
\b0 \
		
\b set
\b0  
\b my
\b0  \cf5 _contents\cf2  
\b to
\b0  
\i \cf4 items
\i0 \cf2  1 
\b thru
\b0  -2 
\b of
\b0  
\b my
\b0  \cf5 _contents\cf2 \
	
\b on
\b0  
\b error
\b0 \
		
\b set
\b0  
\b my
\b0  \cf5 _contents\cf2  
\b to
\b0  \{\}\
	
\b end
\b0  
\b try
\b0 \
	\
	
\b set
\b0  
\b my
\b0  \cf5 _length\cf2  
\b to
\b0  (
\b my
\b0  \cf5 _length\cf2 ) - 1\
	
\b return
\b0  \cf5 a_result\cf2 \

\b end
\b0  \cf5 pop\cf2 \
\
\cf7 (*!\
@abstruct\
<!--begin locale ja-->\

\f1 \'83\'8a\'83\'58\'83\'67\'82\'cc\'90\'e6\'93\'aa\'82\'c9\'97\'76\'91\'66\'82\'f0\'95\'74\'82\'af\'89\'c1\'82\'a6\'82\'dc\'82\'b7\'81\'42
\f0 \
<!--begin locale en-->\
Append an item at the beginning of the list.\
<!--end locale-->\
@param an_item(anything) :\
<!--begin locale ja-->
\f1 \'83\'8a\'83\'58\'83\'67\'82\'c9\'95\'74\'82\'af\'89\'c1\'82\'a6\'82\'e9\'8d\'80\'96\'da
\f0 \
<!--begin locale en-->an item to be appended\
<!--end locale-->\
*)\cf2 \

\b on
\b0  \cf5 unshift\cf2 (\cf5 an_item\cf2 )\
	
\b set
\b0  
\b beginning
\b0  
\b of
\b0  
\b my
\b0  \cf5 _contents\cf2  
\b to
\b0  \cf5 an_item\cf2 \
	\cf5 increment_index\cf2 ()\
	
\b set
\b0  
\b my
\b0  \cf5 _length\cf2  
\b to
\b0  (
\b my
\b0  \cf5 _length\cf2 ) + 1\
	
\b return
\b0  
\b me
\b0 \

\b end
\b0  \cf5 unshift\cf2 \
\
\cf7 (*!\
@abstruct\
<!--begin locale ja-->\

\f1 \'83\'8a\'83\'58\'83\'67\'82\'cc\'90\'e6\'93\'aa\'82\'cc\'97\'76\'91\'66\'82\'f0\'8e\'e6\'93\'be\'82\'b5\'82\'c4\'81\'41\'83\'8a\'83\'58\'83\'67\'82\'a9\'82\'e7\'8d\'ed\'8f\'9c\'82\'b5\'82\'dc\'82\'b7\'81\'42
\f0 \
<!--begin locale en-->\
Obtain first item in the list and remove it.\
<!--end locale-->\
@result anything : \
<!--begin locale ja-->
\f1 \'83\'8a\'83\'58\'83\'67\'82\'cc\'90\'e6\'93\'aa\'82\'cc\'97\'76\'91\'66
\f0 \
<!--begin locale en-->first item in the list <!--end locale-->\
*)\cf2 \

\b on
\b0  \cf5 shift\cf2 ()\
	
\b try
\b0 \
		
\b set
\b0  \cf5 a_result\cf2  
\b to
\b0  
\b first
\b0  
\i \cf4 item
\i0 \cf2  
\b of
\b0  
\b my
\b0  \cf5 _contents\cf2 \
	
\b on
\b0  
\b error
\b0 \
		
\b return
\b0  
\i \cf4 missing value
\i0 \cf2 \
	
\b end
\b0  
\b try
\b0 \
	\
	
\b set
\b0  
\b my
\b0  \cf5 _contents\cf2  
\b to
\b0  \cf3 rest\cf2  
\b of
\b0  
\b my
\b0  \cf5 _contents\cf2 \
	\cf5 decrement_index\cf2 ()\
	
\b set
\b0  
\b my
\b0  \cf5 _length\cf2  
\b to
\b0  (
\b my
\b0  \cf5 _length\cf2 ) - 1\
	
\b return
\b0  \cf5 a_result\cf2 \

\b end
\b0  \cf5 shift\cf2 \
\
\
\cf7 (*!@group Accessing List Items *)\cf2 \
\cf7 (*!\
@abstruct\
<!--begin locale ja-->\

\f1 \'97\'76\'91\'66\'82\'cc\'90\'94\'82\'f0\'95\'d4\'82\'b5\'82\'dc\'82\'b7\'81\'42
\f0 \
<!--begin locale en-->\
Return number of elements\
<!--end locale-->\
@result integer\
*)\cf2 \

\b on
\b0  \cf5 count_items\cf2 ()\
	
\b return
\b0  
\b \cf4 count
\b0 \cf2  
\b my
\b0  \cf5 _contents\cf2 \

\b end
\b0  \cf5 count_items\cf2 \
\

\b on
\b0  \cf5 item_counts\cf2 ()\
	
\b return
\b0  
\b \cf4 count
\b0 \cf2  
\b my
\b0  \cf5 _contents\cf2 \

\b end
\b0  \cf5 item_counts\cf2 \
\

\b on
\b0  
\b \cf4 count
\b0 \cf2 \
	
\b return
\b0  
\b \cf4 count
\b0 \cf2  
\b my
\b0  \cf5 _contents\cf2 \

\b end
\b0  
\b \cf4 count
\b0 \cf2 \
\
\cf7 (*!\
@abstruct\
<!--begin locale ja-->\

\f1 \'8e\'77\'92\'e8\'82\'b5\'82\'bd\'83\'43\'83\'93\'83\'66\'83\'62\'83\'4e\'83\'58\'82\'cc\'97\'76\'91\'66\'82\'f0\'8d\'ed\'8f\'9c\'82\'b5\'82\'dc\'82\'b7\'81\'42
\f0 \
<!--begin locale en-->\
Delete an item specified with an index number.\
<!--end locale-->\
@param indexes(integer or list of interger) :\
<!--begin locale ja-->
\f1 \'8d\'ed\'8f\'9c\'82\'b7\'82\'e9\'97\'76\'91\'66\'82\'cc\'83\'43\'83\'93\'83\'66\'83\'62\'83\'4e\'83\'58\'81\'41\'82\'e0\'82\'b5\'82\'ad\'82\'cd\'83\'43\'83\'93\'83\'66\'83\'62\'83\'4e\'83\'58\'82\'cc\'83\'8a\'83\'58\'83\'67
\f0 \
<!--begin locale en-->an index number or list of indexes of items to delete\
<!--end locale-->\
@result list : \
<!--begin locale ja-->\

\f1 \'8d\'ed\'8f\'9c\'82\'b3\'82\'ea\'82\'bd\'97\'76\'91\'66\'82\'cc\'83\'8a\'83\'58\'83\'67
\f0 \
<!--begin locale en-->\
a list of deleted items form the XList contents\
<!--end locale-->\
*)\cf2 \

\b on
\b0  \cf5 delete_at\cf2 (\cf5 indexes\cf2 )\
	
\b set
\b0  \cf5 indexes\cf2  
\b to
\b0  \cf5 indexes\cf2  
\b as
\b0  
\i \cf4 list
\i0 \cf2 \
	
\b set
\b0  \cf5 a_list\cf2  
\b to
\b0  \{\}\
	\
	
\b repeat
\b0  
\b with
\b0  \cf5 n\cf2  
\b from
\b0  1 
\b to
\b0  \cf3 length\cf2  
\b of
\b0  \cf5 indexes\cf2 \
		
\b set
\b0  \cf5 an_index\cf2  
\b to
\b0  
\i \cf4 item
\i0 \cf2  \cf5 n\cf2  
\b of
\b0  \cf5 indexes\cf2 \
		\cf7 --log "start delete_item"\cf2 \
		
\b set
\b0  
\b end
\b0  
\b of
\b0  \cf5 a_list\cf2  
\b to
\b0  
\i \cf4 item
\i0 \cf2  \cf5 an_index\cf2  
\b of
\b0  
\b my
\b0  \cf5 _contents\cf2 \
		
\b if
\b0  \cf5 an_index\cf2  
\b is
\b0  1 
\b then
\b0 \
			
\b set
\b0  
\b my
\b0  \cf5 _contents\cf2  
\b to
\b0  \cf3 rest\cf2  
\b of
\b0  
\b my
\b0  \cf5 _contents\cf2 \
		
\b else
\b0  
\b if
\b0  \cf5 an_index\cf2  
\b is
\b0  
\b in
\b0  \{
\b my
\b0  \cf5 _length\cf2 , -1\} 
\b then
\b0 \
			
\b set
\b0  
\b my
\b0  \cf5 _contents\cf2  
\b to
\b0  
\i \cf4 items
\i0 \cf2  1 
\b thru
\b0  -2 
\b of
\b0  
\b my
\b0  \cf5 _contents\cf2 \
		
\b else
\b0 \
			
\b set
\b0  
\b my
\b0  \cf5 _contents\cf2  
\b to
\b0  (
\i \cf4 items
\i0 \cf2  1 
\b thru
\b0  (\cf5 an_index\cf2  - 1) 
\b of
\b0  
\b my
\b0  \cf5 _contents\cf2 ) & (
\i \cf4 items
\i0 \cf2  (\cf5 an_index\cf2  + 1) 
\b thru
\b0  -1 
\b of
\b0  
\b my
\b0  \cf5 _contents\cf2 )\
		
\b end
\b0  
\b if
\b0 \
		\
		
\b if
\b0  (
\b my
\b0  \cf5 _n\cf2  > \cf5 an_index\cf2 ) 
\b then
\b0 \
			
\b set
\b0  
\b my
\b0  \cf5 _n\cf2  
\b to
\b0  (
\b my
\b0  \cf5 _n\cf2 ) + 1\
		
\b end
\b0  
\b if
\b0 \
		\
		
\b set
\b0  
\b my
\b0  \cf5 _length\cf2  
\b to
\b0  (
\b my
\b0  \cf5 _length\cf2 ) - 1\
	
\b end
\b0  
\b repeat
\b0 \
	\cf7 --log "end delete_item"\cf2 \
	
\b return
\b0  \cf5 a_list\cf2 \

\b end
\b0  \cf5 delete_at\cf2 \
\
\cf7 (*!\
@abstruct\
<!--begin locale ja-->\

\f1 \'8e\'77\'92\'e8\'82\'b5\'82\'bd\'83\'43\'83\'93\'83\'66\'83\'62\'83\'4e\'83\'58\'82\'cc\'97\'76\'91\'66\'82\'f0\'8e\'e6\'93\'be\'82\'b5\'82\'dc\'82\'b7\'81\'42\'83\'43\'83\'93\'83\'66\'83\'62\'83\'4e\'83\'58\'82\'cc\'83\'8a\'83\'58\'83\'67\'82\'f0\'93\'6e\'82\'b7\'82\'c6\'95\'a1\'90\'94\'82\'cc\'8d\'80\'96\'da\'82\'f0\'8e\'e6\'93\'be\'82\'c5\'82\'ab\'82\'dc\'82\'b7\'81\'42
\f0 \
<!--begin locale en-->\
Obtain an item specified with an index number. When a list of indexes is passed as an argument, multiple items will be obtained.\
<!--end locale-->\
@param an_index(integer or list of integer) : \
<!--begin locale ja-->
\f1 \'97\'76\'91\'66\'82\'cc\'83\'43\'83\'93\'83\'66\'83\'62\'83\'4e\'83\'58\'82\'e0\'82\'b5\'82\'ad\'82\'cd\'83\'43\'83\'93\'83\'66\'83\'62\'83\'4e\'83\'58\'82\'cc\'83\'8a\'83\'58\'83\'67
\f0 \
<!--begin locale en-->an index number or a list of indexes of the items to obtain\
<!--end locale-->\
@result anything : \
<!--begin locale ja-->an_index 
\f1 \'94\'d4\'96\'da\'82\'cc\'97\'76\'91\'66\'81\'42\'8e\'e6\'93\'be\'82\'c9\'8e\'b8\'94\'73\'82\'b5\'82\'bd\'82\'c6\'82\'ab\'82\'cd
\f0  error number -1728 
\f1 \'82\'cd\'94\'ad\'90\'b6\'82\'b5\'82\'dc\'82\'b7\'81\'42
\f0 \
<!--begin locale en-->Return an_index th item. error number -1728 will be rased when an item can not be obtained. <!--end locale-->\
*)\cf2 \

\b on
\b0  \cf5 item_at\cf2 (\cf5 an_index\cf2 )\
	
\b if
\b0  
\i \cf4 class
\i0 \cf2  
\b of
\b0  \cf5 an_index\cf2  
\b is
\b0  
\b not
\b0  
\i \cf4 list
\i0 \cf2  
\b then
\b0 \
		
\b return
\b0  
\i \cf4 item
\i0 \cf2  \cf5 an_index\cf2  
\b of
\b0  
\b my
\b0  \cf5 _contents\cf2 \
	
\b end
\b0  
\b if
\b0 \
	\
	
\b set
\b0  \cf5 a_list\cf2  
\b to
\b0  \{\}\
	
\b set
\b0  \cf5 index_list\cf2  
\b to
\b0  \cf5 make_with\cf2 (\cf5 an_index\cf2 )\
	
\b repeat
\b0  
\b while
\b0  \cf5 index_list\cf2 's \cf5 has_next\cf2 ()\
		
\b set
\b0  
\b end
\b0  
\b of
\b0  \cf5 a_list\cf2  
\b to
\b0  
\i \cf4 item
\i0 \cf2  (\cf5 inde_list\cf2 's \cf5 next\cf2 ()) 
\b of
\b0  
\b my
\b0  \cf5 _contents\cf2 \
	
\b end
\b0  
\b repeat
\b0 \
	
\b return
\b0  \cf5 a_list\cf2 \

\b end
\b0  \cf5 item_at\cf2 \
\
\cf7 (*!\
@abstruct\
<!--begin locale ja-->\

\f1 \'8e\'77\'92\'e8\'82\'b5\'82\'bd\'83\'43\'83\'93\'83\'66\'83\'62\'83\'4e\'83\'58\'82\'cc\'94\'cd\'88\'cd\'82\'cc\'97\'76\'91\'66\'82\'f0\'8e\'e6\'93\'be\'82\'b5\'82\'dc\'82\'b7\'81\'42
\f0 \
<!--begin locale en-->\
Obtain items between two indexes.\
<!--end locale-->\
@param s_index(integer) : \
<!--begin locale ja-->
\f1 \'8d\'c5\'8f\'89\'82\'cc\'97\'76\'91\'66\'82\'cc\'83\'43\'83\'93\'83\'66\'83\'62\'83\'4e\'83\'58
\f0 \
<!--begin locale en-->the first index number\
<!--end locale-->\
@param e_index(integer) : \
<!--begin locale ja-->
\f1 \'8d\'c5\'8c\'e3\'82\'cc\'97\'76\'91\'66\'82\'cc\'83\'43\'83\'93\'83\'66\'83\'62\'83\'4e\'83\'58
\f0 \
<!--begin locale en-->the last index number\
<!--end locale-->\
@result XList : \
<!--begin locale ja-->s_index 
\f1 \'82\'a9\'82\'e7
\f0  e_index 
\f1 \'82\'dc\'82\'c5\'82\'cc\'97\'76\'91\'66\'82\'cc
\f0  XList\
<!--begin locale en-->An XList instance of elements from s_index to e_index <!--end locale-->\
*)\cf2 \

\b on
\b0  \cf5 items_in_range\cf2 (\cf5 s_index\cf2 , \cf5 e_index\cf2 )\
	
\b return
\b0  \cf5 make_with\cf2 (
\i \cf4 items
\i0 \cf2  \cf5 s_index\cf2  
\b thru
\b0  \cf5 e_index\cf2  
\b of
\b0  
\b my
\b0  \cf5 _contents\cf2 )\

\b end
\b0  \cf5 items_in_range\cf2 \
\
\cf7 (*!\
@abstruct\
<!--begin locale ja-->\

\f1 \'8e\'77\'92\'e8\'82\'b5\'82\'bd\'83\'43\'83\'93\'83\'66\'83\'62\'83\'4e\'83\'58\'82\'cc\'97\'76\'91\'66\'82\'f0\'90\'dd\'92\'e8\'82\'b5\'82\'dc\'82\'b7\'81\'42
\f0 \
<!--begin locale en-->\
set an item at a specified index.\
<!--end locale-->\
@param an_index(integer) : \
<!--begin locale ja-->
\f1 \'97\'76\'91\'66\'82\'cc\'83\'43\'83\'93\'83\'66\'83\'62\'83\'4e\'83\'58
\f0 \
<!--begin locale en-->an index number of the item to set\
<!--end locale-->\
*)\cf2 \

\b on
\b0  \cf5 set_item\cf2  \cf4 for\cf2  \cf5 a_value\cf2  \cf4 at\cf2  \cf5 an_index\cf2 \
	
\b set
\b0  
\i \cf4 item
\i0 \cf2  \cf5 an_index\cf2  
\b of
\b0  
\b my
\b0  \cf5 _contents\cf2  
\b to
\b0  \cf5 a_value\cf2 \

\b end
\b0  \cf5 set_item\cf2 \
\
\cf7 (*!\
@abstruct\
<!-- begin locale ja -->\

\f1 \'83\'43\'83\'93\'83\'66\'83\'62\'83\'4e\'83\'58\'82\'c5\'8e\'77\'92\'e8\'82\'b5\'82\'bd\'97\'76\'91\'66\'82\'f0\'93\'fc\'82\'ea\'91\'d6\'82\'a6\'82\'dc\'82\'b7\'81\'42
\f0 \
<!-- begin locale en -->\
Exchange items specified with indexes\
<!-- end locale -->\
@param index1(integer) : \
<!-- begin locale ja -->
\f1 \'93\'fc\'82\'ea\'91\'d6\'82\'a6\'82\'e9\'97\'76\'91\'66\'82\'cc\'88\'ea\'82\'c2\'96\'da\'82\'cc\'83\'43\'83\'93\'83\'66\'83\'62\'83\'4e\'83\'58
\f0 \
<!-- begin locale en -->first index of an element to exchange\
<!-- end locale -->\
@param index2 (integer) : \
<!-- begin locale ja -->
\f1 \'93\'fc\'82\'ea\'91\'d6\'82\'a6\'82\'e9\'97\'76\'91\'66\'82\'cc\'93\'f1\'82\'c2\'96\'da\'82\'cc\'83\'43\'83\'93\'83\'66\'83\'62\'83\'4e\'83\'58
\f0 \
<!-- begin locale en -->second index of an element to exchange\
<!-- end locale -->\
*)\cf2 \

\b on
\b0  \cf5 exchange_items\cf2 (\cf5 index1\cf2 , \cf5 index2\cf2 )\
	
\b set
\b0  \cf5 a_buff\cf2  
\b to
\b0  
\i \cf4 item
\i0 \cf2  \cf5 index1\cf2  
\b of
\b0  
\b my
\b0  \cf5 _contents\cf2 \
	
\b set
\b0  
\i \cf4 item
\i0 \cf2  \cf5 index1\cf2  
\b of
\b0  
\b my
\b0  \cf5 _contents\cf2  
\b to
\b0  
\i \cf4 item
\i0 \cf2  \cf5 index2\cf2  
\b of
\b0  
\b my
\b0  \cf5 _contents\cf2 \
	
\b set
\b0  
\i \cf4 item
\i0 \cf2  \cf5 index2\cf2  
\b of
\b0  
\b my
\b0  \cf5 _contents\cf2  
\b to
\b0  \cf5 a_buff\cf2 \

\b end
\b0  \cf5 exchange_items\cf2 \
\
\cf7 (*!\
@abstruct\
<!--begin locale ja-->\

\f1 \'83\'49\'83\'75\'83\'57\'83\'46\'83\'4e\'83\'67
\f0  an_item 
\f1 \'82\'f0\'8a\'dc\'82\'f1\'82\'c5\'82\'a2\'82\'e9\'82\'a9\'82\'c7\'82\'a4\'82\'a9\'92\'b2\'82\'d7\'82\'dc\'82\'b7\'81\'42
\f0 \
<!--begin locale en-->\
Check whether the object "an_item" is included in the XList instance or not.\
<!--end locale-->\
@param an_item(boolean)\
@result anything : \
<!--begin locale ja--> an_item 
\f1 \'82\'f0\'8a\'dc\'82\'f1\'82\'c5\'82\'a2\'82\'bd\'82\'e7
\f0  true\
<!--begin locale en--> if an_item is in the XList instance, ture will be returned. <!--end locale-->\
*)\cf2 \

\b on
\b0  \cf5 has_item\cf2 (\cf5 an_item\cf2 )\
	
\b return
\b0  \cf5 an_item\cf2  
\b is
\b0  
\b in
\b0  
\b my
\b0  \cf5 _contents\cf2 \

\b end
\b0  \cf5 has_item\cf2 \
\
\cf7 (*!\
@abstruct\
<!--begin locale ja-->\

\f1 \'83\'49\'83\'75\'83\'57\'83\'46\'83\'4e\'83\'67
\f0  an_item 
\f1 \'82\'cc\'83\'43\'83\'93\'83\'66\'83\'62\'83\'4e\'83\'58\'82\'f0\'8e\'e6\'93\'be\'82\'b5\'82\'dc\'82\'b7\'81\'42
\f0 \
<!--begin locale en-->\
Obtain an index number of the object "an_item" in the XList instance.\
<!--end locale-->\
@param an_item(integer)\
@result anything : \
<!--begin locale ja--> an_item 
\f1 \'82\'cc\'83\'43\'83\'93\'83\'66\'83\'62\'83\'4e\'83\'58
\f0 \
<!--begin locale en--> an index number of an_item <!--end locale-->\
*)\cf2 \

\b on
\b0  \cf5 index_of\cf2 (\cf5 an_item\cf2 )\
	
\b if
\b0  
\b not
\b0  \cf5 has_item\cf2 (\cf5 an_item\cf2 ) 
\b then
\b0 \
		
\b return
\b0  0\
	
\b end
\b0  
\b if
\b0 \
	\
	
\b set
\b0  \cf5 an_index\cf2  
\b to
\b0  0\
	
\b repeat
\b0  
\b with
\b0  \cf5 n\cf2  
\b from
\b0  1 
\b to
\b0  
\b my
\b0  \cf5 _length\cf2 \
		
\b if
\b0  
\i \cf4 item
\i0 \cf2  \cf5 n\cf2  
\b of
\b0  
\b my
\b0  \cf5 _contents\cf2  
\b is
\b0  \cf5 an_item\cf2  
\b then
\b0 \
			
\b set
\b0  \cf5 an_index\cf2  
\b to
\b0  \cf5 n\cf2 \
			
\b exit
\b0  
\b repeat
\b0 \
		
\b end
\b0  
\b if
\b0 \
	
\b end
\b0  
\b repeat
\b0 \
	\
	
\b return
\b0  \cf5 an_index\cf2 \

\b end
\b0  \cf5 index_of\cf2 \
\
\cf7 (*!\
@abstruct\
<!--begin locale ja-->\

\f1 \'93\'e0\'95\'ef\'82\'b5\'82\'c4\'82\'a2\'82\'e9\'83\'8a\'83\'58\'83\'67\'82\'cc\'83\'52\'83\'73\'81\'5b\'82\'f0\'95\'d4\'82\'b5\'82\'dc\'82\'b7\'81\'42
\f0 \
<!--begin locale en-->\
return a copy of stored list.\
<!--end locale-->\
@result list \
*)\cf2 \

\b on
\b0  \cf5 all_items\cf2 ()\
	
\b copy
\b0  
\b my
\b0  \cf5 _contents\cf2  
\b to
\b0  \cf5 a_list\cf2 \
	
\b return
\b0  \cf5 a_list\cf2 \

\b end
\b0  \cf5 all_items\cf2 \
\
\cf7 (*!\
@abstruct\
<!--begin locale ja-->\

\f1 \'93\'e0\'95\'ef\'82\'b5\'82\'c4\'82\'a2\'82\'e9\'83\'8a\'83\'58\'83\'67\'82\'f0\'95\'d4\'82\'b5\'82\'dc\'82\'b7\'81\'42
\f0 \
<!--begin locale en-->\
return the stored list.\
<!--end locale-->\
@description\
<!--begin locale ja-->\

\f1 \'95\'d4\'82\'e8\'92\'6c\'82\'cc\'83\'8a\'83\'58\'83\'67\'82\'f0\'95\'cf\'8d\'58\'82\'b7\'82\'e9\'82\'c6\'81\'41
\f0 XList 
\f1 \'82\'cc\'93\'e0\'97\'65\'82\'f0\'95\'cf\'8d\'58\'82\'b7\'82\'e9\'82\'b1\'82\'c6\'82\'c9\'82\'c8\'82\'e8\'82\'dc\'82\'b7\'81\'42
\f0 \

\f1 \'82\'c5\'82\'ab\'82\'e9\'82\'a9\'82\'ac\'82\'e8\'81\'41\'82\'b1\'82\'cc\'83\'81\'83\'5c\'83\'62\'83\'68\'82\'f0\'8e\'67\'82\'ed\'82\'c8\'82\'a2\'82\'b1\'82\'c6\'82\'f0\'82\'a8\'82\'b7\'82\'b7\'82\'df\'82\'b5\'82\'dc\'82\'b7\'81\'42
\f0 \
<!--begin locale en-->\
Changing elements in retuend list means changing contents of the XList instance.\
It is recommended not to use this method.\
<!--end locale-->\
@result list \
*)\cf2 \

\b on
\b0  \cf5 list_ref\cf2 ()\
	
\b return
\b0  
\b my
\b0  \cf5 _contents\cf2 \

\b end
\b0  \cf5 list_ref\cf2 \
\
\cf7 (*!@group Conversion to Text *)\cf2 \
\
\cf7 (*!\
@abstruct\
<!--begin locale ja-->\

\f1 \'97\'5e\'82\'a6\'82\'e7\'82\'ea\'82\'bd\'8b\'e6\'90\'d8\'82\'e8\'95\'b6\'8e\'9a\'82\'f0\'82\'c2\'82\'a9\'82\'c1\'82\'c4\'97\'76\'91\'66\'82\'f0\'95\'b6\'8e\'9a\'97\'f1\'82\'c6\'82\'b5\'82\'c4\'8c\'8b\'8d\'87\'82\'b5\'82\'dc\'82\'b7\'81\'42
\f0 ((<XText>)) 
\f1 \'82\'cc\'83\'43\'83\'93\'83\'58\'83\'5e\'83\'93\'83\'58\'82\'f0\'95\'d4\'82\'b5\'82\'dc\'82\'b7\'81\'42
\f0 \
<!--begin locale en-->\
Join every elements with given a delimiters as ((<XText>))\
<!--end locale-->\
@param a_delimiter (string or Unicode text): \
<!--begin locale ja-->\

\f1 \'8b\'e6\'90\'d8\'82\'e8\'95\'b6\'8e\'9a
\f0 \
<!--begin locale en-->\
text to be used as a delimiter to join text list\
<!--end locale-->\
@result script object : a ((<XText>)) instance\
*)\cf2 \

\b on
\b0  \cf5 as_xtext_with\cf2 (\cf5 a_delimiter\cf2 )\
	
\b set
\b0  \cf5 a_text\cf2  
\b to
\b0  \cf5 as_unicode_with\cf2 (\cf5 a_delimiter\cf2 )\
	
\b return
\b0  \cf5 XText\cf2 's \cf5 make_with\cf2 (\cf5 a_text\cf2 )\

\b end
\b0  \cf5 as_xtext_with\cf2 \
\
\cf7 (*!\
@abstruct\
<!--begin locale ja-->\

\f1 \'97\'5e\'82\'a6\'82\'e7\'82\'ea\'82\'bd\'8b\'e6\'90\'d8\'82\'e8\'95\'b6\'8e\'9a\'82\'f0\'82\'c2\'82\'a9\'82\'c1\'82\'c4\'81\'41
\f0 Unicode text 
\f1 \'82\'c6\'82\'b5\'82\'c4\'82\'b7\'82\'d7\'82\'c4\'82\'cc\'97\'76\'91\'66\'82\'f0\'8c\'8b\'8d\'87\'82\'b5\'82\'dc\'82\'b7\'81\'42
\f0 \
<!--begin locale en-->\
Join every elements with given a delimiters as Unicode text\
<!--end locale-->\
@param a_delimiter (string or Unicode text): \
<!--begin locale ja-->\

\f1 \'8b\'e6\'90\'d8\'82\'e8\'95\'b6\'8e\'9a
\f0 \
<!--begin locale en-->\
text to be used as a delimiter to join text list\
<!--end locale-->\
@result Unicode text\
*)\cf2 \

\b on
\b0  \cf5 as_unicode_with\cf2 (\cf5 a_delimiter\cf2 )\
	
\b tell
\b0  \cf5 XText\cf2 \
		\cf5 store_delimiters\cf2 ()\
		
\b set
\b0  \cf5 a_text\cf2  
\b to
\b0  \cf5 |join|\cf2 (
\b my
\b0  \cf5 _contents\cf2 , \cf5 a_delimiter\cf2 )\
		\cf5 restore_delimiters\cf2 ()\
	
\b end
\b0  
\b tell
\b0 \
	
\b return
\b0  \cf5 a_text\cf2 \

\b end
\b0  \cf5 as_unicode_with\cf2 \
\
\cf7 (*!\
@abstruct\
<!--begin locale ja-->\

\f1 \'97\'5e\'82\'a6\'82\'e7\'82\'ea\'82\'bd\'8b\'e6\'90\'d8\'82\'e8\'95\'b6\'8e\'9a\'82\'f0\'82\'c2\'82\'a9\'82\'c1\'82\'c4\'81\'41
\f0  string 
\f1 \'82\'c6\'82\'b5\'82\'c4\'82\'b7\'82\'d7\'82\'c4\'82\'cc\'97\'76\'91\'66\'82\'f0\'8c\'8b\'8d\'87\'82\'b5\'82\'dc\'82\'b7\'81\'42
\f0 \
<!--begin locale en-->\
Join every elements with given a delimiters as string\
<!--end locale-->\
@param a_delimiter (string or Unicode text): \
<!--begin locale ja-->\

\f1 \'8b\'e6\'90\'d8\'82\'e8\'95\'b6\'8e\'9a
\f0 \
<!--begin locale en-->\
text to be used as a delimiter to join text list\
<!--end locale-->\
@result string\
*)\cf2 \

\b on
\b0  \cf5 as_string_with\cf2 (\cf5 a_delimiter\cf2 )\
	
\b tell
\b0  \cf5 XText\cf2 \
		\cf5 store_delimiters\cf2 ()\
		
\b set
\b0  \cf5 a_text\cf2  
\b to
\b0  \cf5 join_as_string\cf2 (
\b my
\b0  \cf5 _contents\cf2 , \cf5 a_delimiter\cf2 )\
		\cf5 restore_delimiters\cf2 ()\
	
\b end
\b0  
\b tell
\b0 \
	
\b return
\b0  \cf5 a_text\cf2 \

\b end
\b0  \cf5 as_string_with\cf2 \
\
\
\cf7 (*!@group Loop with Script Object *)\cf2 \
\
\cf7 (*!\
@abstruct \
<!--begin locale ja-->\

\f1 \'83\'8a\'83\'58\'83\'67\'82\'cc\'97\'76\'91\'66\'82\'f0\'88\'f8\'90\'94\'82\'c9\'82\'b5\'82\'c4\'83\'58\'83\'4e\'83\'8a\'83\'76\'83\'67\'83\'49\'83\'75\'83\'57\'83\'46\'83\'4e\'83\'67\'82\'cc
\f0  do 
\f1 \'83\'6e\'83\'93\'83\'68\'83\'89\'82\'f0\'8c\'4a\'82\'e8\'95\'d4\'82\'b5\'8e\'c0\'8d\'73\'82\'b5\'82\'dc\'82\'b7\'81\'42
\f0 \
<!--begin locale en-->\
Call do handler of given script object with each item in the XList as an argument.\
<!--end locale-->\
@description \
<!--begin locale ja-->\
a_script 
\f1 \'82\'cd\'88\'f8\'90\'94\'82\'f0\'88\'ea\'82\'c2\'82\'be\'82\'af\'82\'c6\'82\'e9
\f0  do 
\f1 \'83\'6e\'83\'93\'83\'68\'83\'89\'82\'f0\'8e\'c0\'91\'95\'82\'b5\'82\'c4\'82\'a2\'82\'c8\'82\'af\'82\'ea\'82\'ce\'82\'c8\'82\'e8\'82\'dc\'82\'b9\'82\'f1\'81\'42
\f0 do 
\f1 \'83\'6e\'83\'93\'83\'68\'83\'89\'82\'cc\'95\'d4\'82\'e8\'92\'6c\'82\'cd
\f0  true 
\f1 \'82\'e0\'82\'b5\'82\'ad\'82\'cd
\f0  false 
\f1 \'82\'c5\'82\'a0\'82\'e9\'95\'4b\'97\'76\'82\'aa\'82\'a0\'82\'e8\'82\'dc\'82\'b7\'81\'42
\f0 do 
\f1 \'83\'6e\'83\'93\'83\'68\'83\'89\'82\'aa
\f0  false 
\f1 \'82\'f0
\f0  
\f1 \'95\'d4\'82\'b7\'82\'c6\'8f\'88\'97\'9d\'82\'f0\'92\'86\'8e\'7e\'82\'b5\'82\'dc\'82\'b7\'81\'42
\f0 \
\
do 
\f1 \'82\'cc\'88\'f8\'90\'94\'82\'c9\'82\'cd\'83\'8a\'83\'58\'83\'67\'82\'cc\'97\'76\'91\'66\'82\'d6\'82\'cc\'8e\'51\'8f\'c6\'82\'aa\'93\'6e\'82\'b3\'82\'ea\'82\'dc\'82\'b7\'81\'42
\f0 contents 
\f1 \'82\'c9\'92\'6c\'82\'f0\'91\'e3\'93\'fc\'82\'b7\'82\'e9\'82\'b1\'82\'c6\'82\'c9\'82\'e6\'82\'e8\'81\'41\'83\'8a\'83\'58\'83\'67\'82\'cc\'97\'76\'91\'66\'82\'f0\'8f\'91\'82\'ab\'8a\'b7\'82\'a6\'82\'e9\'82\'b1\'82\'c6\'82\'aa\'82\'c5\'82\'ab\'82\'dc\'82\'b7\'81\'42
\f0 \
<!--begin locale en-->\
a_script must have a
\f1 \'81\'40
\f0 do handler which require only argument. The do handler must return true or false. When the do handler return false, the process is stoped immediately.\
\
A reference to an item of the list is passed to the do handler. You can change elements of the list by assining a value to contents of the reference.\
<!--end locale-->\
@param\
<!--begin locale ja-->\
a_script(
\f1 \'83\'58\'83\'4e\'83\'8a\'83\'76\'83\'67\'83\'49\'83\'75\'83\'57\'83\'46\'83\'4e\'83\'67
\f0 ) : 
\f1 \'88\'f8\'90\'94\'82\'f0\'88\'ea\'82\'c2\'82\'be\'82\'af\'82\'c6\'82\'e9
\f0  do 
\f1 \'83\'6e\'83\'93\'83\'68\'83\'89\'82\'f0\'8e\'9d\'82\'c1\'82\'c4\'82\'a2\'82\'e9\'95\'4b\'97\'76\'82\'aa\'82\'a0\'82\'e8\'82\'dc\'82\'b7\'81\'42
\f0  do 
\f1 \'83\'6e\'83\'93\'83\'68\'83\'89\'82\'cd\'90\'5e\'8b\'55\'92\'6c\'82\'f0\'95\'d4\'82\'b3\'82\'c8\'82\'ad\'82\'c4\'82\'cd\'82\'c8\'82\'e8\'82\'dc\'82\'b9\'82\'f1\'81\'42
\f0 \
<!--begin locale en-->\
a_script(script object) : must have a do handler which require only argument. The do handler must return boolean.\
<!--end locale-->\
*)\cf2 \

\b on
\b0  \cf5 each\cf2 (\cf5 a_script\cf2 )\
	
\b repeat
\b0  
\b with
\b0  \cf5 an_item\cf2  
\b in
\b0  (
\b a reference
\b0  
\b to
\b0  
\b my
\b0  \cf5 _contents\cf2 )\
		\cf7 --if not (a_script's do(an_item)) then\cf2 \
		
\b if
\b0  (\cf5 a_script\cf2 's \cf5 do\cf2 (\cf5 an_item\cf2 ) 
\b is
\b0  \cf8 false\cf2 ) 
\b then
\b0 \
			
\b exit
\b0  
\b repeat
\b0 \
		
\b end
\b0  
\b if
\b0 \
	
\b end
\b0  
\b repeat
\b0 \

\b end
\b0  \cf5 each\cf2 \
\
\cf7 (*!\
@abstruct \
<!--begin locale ja-->\

\f1 \'83\'8a\'83\'58\'83\'67\'82\'cc\'82\'b7\'82\'d7\'82\'c4\'82\'cc\'97\'76\'91\'66\'82\'f0\'88\'f8\'90\'94\'82\'c9\'82\'b5\'82\'c4\'83\'58\'83\'4e\'83\'8a\'83\'76\'83\'67\'83\'49\'83\'75\'83\'57\'83\'46\'83\'4e\'83\'67\'82\'cc
\f0  do 
\f1 \'83\'6e\'83\'93\'83\'68\'83\'89\'82\'f0\'8e\'c0\'8d\'73\'82\'b5\'82\'dc\'82\'b7\'81\'42
\f0 do 
\f1 \'83\'6e\'83\'93\'83\'68\'83\'89\'82\'cc\'95\'d4\'82\'e8\'92\'6c\'82\'f0\'97\'76\'91\'66\'82\'c6\'82\'b5\'82\'bd
\f0  XList 
\f1 \'82\'aa\'8c\'8b\'89\'ca\'82\'c9\'82\'c8\'82\'e8\'82\'dc\'82\'b7\'81\'42
\f0 \
<!--begin locale en-->\
Call do handler of given script object with each items in the list as and argument. A XList consisting of the results of do handler is returned.\
<!--end locale-->\
@description \
<!--begin locale ja-->\
a_script 
\f1 \'82\'cd\'88\'f8\'90\'94\'82\'f0\'88\'ea\'82\'c2\'82\'be\'82\'af\'82\'c6\'82\'e9
\f0  do 
\f1 \'83\'6e\'83\'93\'83\'68\'83\'89\'82\'f0\'8e\'c0\'91\'95\'82\'b5\'82\'c4\'82\'a2\'82\'c8\'82\'af\'82\'ea\'82\'ce\'82\'c8\'82\'e8\'82\'dc\'82\'b9\'82\'f1\'81\'42
\f0 \
\
do 
\f1 \'82\'cc\'88\'f8\'90\'94\'82\'c9\'82\'cd\'83\'8a\'83\'58\'83\'67\'82\'cc\'97\'76\'91\'66\'82\'d6\'82\'cc\'8e\'51\'8f\'c6\'82\'aa\'93\'6e\'82\'b3\'82\'ea\'82\'dc\'82\'b7\'81\'42
\f0 contents 
\f1 \'82\'c9\'92\'6c\'82\'f0\'91\'e3\'93\'fc\'82\'b7\'82\'e9\'82\'b1\'82\'c6\'82\'c9\'82\'e6\'82\'e8\'81\'41\'83\'8a\'83\'58\'83\'67\'82\'cc\'97\'76\'91\'66\'82\'f0\'8f\'91\'82\'ab\'8a\'b7\'82\'a6\'82\'e9\'82\'b1\'82\'c6\'82\'aa\'82\'c5\'82\'ab\'82\'dc\'82\'b7\'81\'42
\f0 \
<!--begin locale en-->\
a_script must have a
\f1 \'81\'40
\f0 do handler which require only argument.\
\
A reference to an item of the list is passed to the do handler. You can change elements of the list by assining a value to contents of the reference.\
<!--end locale-->\
@param a_script(script object) :\
<!--begin locale ja--> 
\f1 \'88\'f8\'90\'94\'82\'f0\'88\'ea\'82\'c2\'82\'be\'82\'af\'82\'c6\'82\'e9
\f0  do 
\f1 \'83\'6e\'83\'93\'83\'68\'83\'89\'82\'f0\'8e\'9d\'82\'c1\'82\'c4\'82\'a2\'82\'e9\'95\'4b\'97\'76\'82\'aa\'82\'a0\'82\'e8\'82\'dc\'82\'b7\'81\'42
\f0 \
<!--begin locale en--> must have a do handler which require only argument.\
<!--end locale-->\
@result Instance of XList\
*)\cf2 \

\b on
\b0  \cf5 map\cf2 (\cf5 a_script\cf2 )\
	
\b set
\b0  \cf5 a_list\cf2  
\b to
\b0  \cf5 map_as_list\cf2 (\cf5 a_script\cf2 )\
	
\b return
\b0  \cf5 make_with_list\cf2 (\cf5 a_list\cf2 )\

\b end
\b0  \cf5 map\cf2 \
\
\cf7 (*!\
@abstruct \
<!--begin locale ja-->\

\f1 \'83\'8a\'83\'58\'83\'67\'82\'cc\'82\'b7\'82\'d7\'82\'c4\'82\'cc\'97\'76\'91\'66\'82\'f0\'88\'f8\'90\'94\'82\'c9\'82\'b5\'82\'c4\'83\'58\'83\'4e\'83\'8a\'83\'76\'83\'67\'83\'49\'83\'75\'83\'57\'83\'46\'83\'4e\'83\'67\'82\'cc
\f0  do 
\f1 \'83\'6e\'83\'93\'83\'68\'83\'89\'82\'f0\'8e\'c0\'8d\'73\'82\'b5\'82\'dc\'82\'b7\'81\'42
\f0 do 
\f1 \'83\'6e\'83\'93\'83\'68\'83\'89\'82\'cc\'95\'d4\'82\'e8\'92\'6c\'82\'cc\'83\'8a\'83\'58\'83\'67\'82\'aa\'8c\'8b\'89\'ca\'82\'c9\'82\'c8\'82\'e8\'82\'dc\'82\'b7\'81\'42
\f0 \
<!--begin locale en-->\
Call do handler of given script object with each items in the list as and argument. An AppleScript's list of the results of do handler is returned.\
<!--end locale-->\
@description \
<!--begin locale ja-->\
a_script 
\f1 \'82\'cd\'88\'f8\'90\'94\'82\'f0\'88\'ea\'82\'c2\'82\'be\'82\'af\'82\'c6\'82\'e9
\f0  do 
\f1 \'83\'6e\'83\'93\'83\'68\'83\'89\'82\'f0\'8e\'c0\'91\'95\'82\'b5\'82\'c4\'82\'a2\'82\'c8\'82\'af\'82\'ea\'82\'ce\'82\'c8\'82\'e8\'82\'dc\'82\'b9\'82\'f1\'81\'42
\f0 \
\
do 
\f1 \'82\'cc\'88\'f8\'90\'94\'82\'c9\'82\'cd\'83\'8a\'83\'58\'83\'67\'82\'cc\'97\'76\'91\'66\'82\'d6\'82\'cc\'8e\'51\'8f\'c6\'82\'aa\'93\'6e\'82\'b3\'82\'ea\'82\'dc\'82\'b7\'81\'42
\f0 contents 
\f1 \'82\'c9\'92\'6c\'82\'f0\'91\'e3\'93\'fc\'82\'b7\'82\'e9\'82\'b1\'82\'c6\'82\'c9\'82\'e6\'82\'e8\'81\'41\'83\'8a\'83\'58\'83\'67\'82\'cc\'97\'76\'91\'66\'82\'f0\'8f\'91\'82\'ab\'8a\'b7\'82\'a6\'82\'e9\'82\'b1\'82\'c6\'82\'aa\'82\'c5\'82\'ab\'82\'dc\'82\'b7\'81\'42
\f0 \
<!--begin locale en-->\
a_script must have a
\f1 \'81\'40
\f0 do handler which require only argument.\
\
A reference to an item of the list is passed to the do handler. You can change elements of the list by assining a value to contents of the reference.\
<!--end locale-->\
@param a_script(script object) :\
<!--begin locale ja--> 
\f1 \'88\'f8\'90\'94\'82\'f0\'88\'ea\'82\'c2\'82\'be\'82\'af\'82\'c6\'82\'e9
\f0  do 
\f1 \'83\'6e\'83\'93\'83\'68\'83\'89\'82\'f0\'8e\'9d\'82\'c1\'82\'c4\'82\'a2\'82\'e9\'95\'4b\'97\'76\'82\'aa\'82\'a0\'82\'e8\'82\'dc\'82\'b7\'81\'42
\f0 \
<!--begin locale en--> must have a do handler which require only argument.\
<!--end locale-->\
@result list\
*)\cf2 \

\b on
\b0  \cf5 map_as_list\cf2 (\cf5 a_script\cf2 )\
	
\b set
\b0  \cf5 a_list\cf2  
\b to
\b0  \{\}\
	
\b repeat
\b0  
\b with
\b0  \cf5 an_item\cf2  
\b in
\b0  (
\b a reference
\b0  
\b to
\b0  
\b my
\b0  \cf5 _contents\cf2 )\
		
\b set
\b0  
\b end
\b0  
\b of
\b0  \cf5 a_list\cf2  
\b to
\b0  (\cf5 a_script\cf2 's \cf5 do\cf2 (\cf5 an_item\cf2 ))\
	
\b end
\b0  
\b repeat
\b0 \
	
\b return
\b0  \cf5 a_list\cf2 \

\b end
\b0  \cf5 map_as_list\cf2 \
\

\b on
\b0  
\b \cf4 log
\b0 \cf2 \
	
\b tell
\b0  \cf3 AppleScript\cf2  
\b to
\b0  
\b \cf4 log
\b0 \cf2  (
\b my
\b0  \cf5 dump\cf2 ())\

\b end
\b0  
\b \cf4 log
\b0 \cf2 \
\

\b on
\b0  \cf5 dump\cf2 ()\
	
\b script
\b0  \cf5 XListDumper\cf2 \
		
\b property
\b0  \cf5 an_index\cf2  : 0\
		
\b on
\b0  \cf5 do\cf2 (\cf5 an_item\cf2 )\
			
\b set
\b0  \cf5 an_index\cf2  
\b to
\b0  \cf5 an_index\cf2  + 1\
			
\b set
\b0  \cf5 output\cf2  
\b to
\b0  (\cf5 an_index\cf2  
\b as
\b0  
\i \cf4 Unicode text
\i0 \cf2 )\
			
\b if
\b0  
\i \cf4 class
\i0 \cf2  
\b of
\b0  \cf5 an_item\cf2  
\b is
\b0  
\i \cf4 script
\i0 \cf2  
\b then
\b0 \
				
\b set
\b0  \cf5 dump_data\cf2  
\b to
\b0  \cf5 an_item\cf2 's \cf5 dump\cf2 ()\
			
\b else
\b0 \
				
\b set
\b0  \cf5 dump_data\cf2  
\b to
\b0  \cf5 an_item\cf2  
\b as
\b0  
\i \cf4 Unicode text
\i0 \cf2 \
			
\b end
\b0  
\b if
\b0 \
			
\b return
\b0  \cf5 output\cf2  & \cf3 tab\cf2  & \cf5 dump_data\cf2 \
		
\b end
\b0  \cf5 do\cf2 \
	
\b end
\b0  
\b script
\b0 \
	
\b set
\b0  \cf5 dump_list\cf2  
\b to
\b0  \cf5 map\cf2 (\cf5 XListDumper\cf2 )\
	\cf5 dump_list\cf2 's \cf5 unshift\cf2 ("[" & 
\b my
\b0  \cf3 name\cf2  & "]")\
	
\b return
\b0  \cf5 dump_list\cf2 's \cf5 as_unicode_with\cf2 (\cf3 return\cf2 )\

\b end
\b0  \cf5 dump\cf2 \
\
\cf7 (*== private *)\cf2 \

\b on
\b0  \cf5 debug\cf2 ()\
	
\b tell
\b0  (
\b \cf6 module loader
\b0 \cf2 )\
		\cf5 export\cf2 (
\b me
\b0 )\
		
\b \cf6 boot
\b0 \cf2  \cf6 for\cf2  
\b me
\b0 \
		
\b set
\b0  \cf5 Test\cf2  
\b to
\b0  
\b \cf6 load module
\b0 \cf2  "Test"\
	
\b end
\b0  
\b tell
\b0 \
	
\b set
\b0  \cf5 a_list\cf2  
\b to
\b0  \cf5 make_with\cf2 (\{"a", "b"\})\
	\cf5 a_list\cf2 's \cf5 delete_at\cf2 (1)\
	\cf5 Test\cf2 's \cf5 assert_true\cf2 (\cf5 a_list\cf2 's \cf5 list_ref\cf2 () 
\b is
\b0  \{"b"\}, "Faild to delete_at")\
	
\b \cf4 count
\b0 \cf2  \cf5 a_list\cf2 \
	\cf5 Test\cf2 's \cf5 assert_true\cf2 (\cf3 result\cf2  
\b is
\b0  1, "Faild to count")\

\b end
\b0  \cf5 debug\cf2 \
\

\b on
\b0  
\b \cf4 run
\b0 \cf2 \
	\cf7 --return debug()\cf2 \
	
\b try
\b0 \
		
\b \cf6 show helpbook
\b0 \cf2  (
\b \cf6 path to
\b0 \cf2  
\b me
\b0 ) 
\b with
\b0  \cf6 recovering InfoPlist\cf2 \
	
\b on
\b0  
\b error
\b0  \cf5 msg\cf2  \cf4 number\cf2  \cf5 errno\cf2 \
		
\b \cf6 display alert
\b0 \cf2  (\cf5 msg\cf2  & \cf3 return\cf2  & \cf5 errno\cf2 )\
	
\b end
\b0  
\b try
\b0 \

\b end
\b0  
\b \cf4 run
\b0 \cf2 \
\
}